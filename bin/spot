#!/usr/bin/env python

import sys
import argparse
from spot import __version__, runner


class Dispatcher(object):

    def __init__(self):
        funcs = (getattr(self, f) for f in ('list', 'run', 'remote'))
        descriptions = ((f.__name__, f.__doc__) for f in funcs)
        usage = """spot <command> [<args>]

Most commonly used spot commands are:
"""
        usage += "\n".join("  {:<12}{}".format(n, d) for n, d in descriptions)
        parser = argparse.ArgumentParser(usage=usage)
        parser.add_argument('--version',
                            action='version',
                            version='spot v{}'.format(__version__))
        parser.add_argument('command', help="Subcommand to run")
        args = parser.parse_args(sys.argv[1:2])

        if not hasattr(self, args.command):
            parser.print_help()
            sys.exit(1)

        getattr(self, args.command)(sys.argv[2:])

    def run(self, argv):
        """Execute a workflow"""
        def key_value_assignment(arg):
            t = tuple(arg.split('='))

            if len(t) != 2:
                raise argparse.ArgumentTypeError("`{}' has no value".format(t[0]))

            if t[1] == '':
                raise argparse.ArgumentTypeError("Value of `{}' is empty".format(t[0]))

            return t

        parser = argparse.ArgumentParser(description=self.run.__doc__)
        parser.add_argument('--submit', action='store_true', default=False)
        parser.add_argument('runner', metavar='RUNNER', type=str)
        parser.add_argument('parameters', metavar='KEY=VAL', type=key_value_assignment, nargs='*')
        args = parser.parse_args(argv)
        r = runner.load(args.runner)
        facts = r.execute(dict(args.parameters))

        if args.submit:
            from spot.client import Spot
            client = Spot()
            client.submit_facts(r, facts)

    def list(self, argv):
        """List available workflows"""
        parser = argparse.ArgumentParser(description=self.list.__doc__)
        parser.parse_args(argv)

        for r in runner.list_all():
            print(r)

    def remote(self, argv):
        """Communicate with the remote server"""
        from spot.client import Spot

        def submit(args):
            result = runner.load(args.runner)
            schema = runner.RunnerSchema()
            client = Spot()
            client.submit_runner(schema.dumps(result).data)

        def list(args):
            client = Spot()

            for key, data in client.list_workflows().items():
                print("{}".format(key))

        parser = argparse.ArgumentParser(description=self.remote.__doc__)
        command_parser = parser.add_subparsers(title="Remote commands")

        submit_parser = command_parser.add_parser('submit', help="Submit data to server")
        submit_parser.set_defaults(run=submit)
        submit_parser.add_argument('runner', metavar='RUNNER', type=str)

        submit_parser = command_parser.add_parser('list', help="List existing workflows")
        submit_parser.set_defaults(run=list)

        args = parser.parse_args(sys.argv[2:])
        args.run(args)


def main():
    try:
        Dispatcher()
    except (runner.LoadError, runner.ExecutionError) as e:
        print("Error: {}".format(e))


if __name__ == '__main__':
    main()
